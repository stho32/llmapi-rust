name: Build and Release

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: llm-api

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-gnu, x86_64-unknown-linux-gnu
    
    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64

    - name: Generate release version
      id: version
      run: |
        echo "version=v.$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

    - name: Build Linux Binary
      run: |
        cargo build --release --target x86_64-unknown-linux-gnu
        echo "Linux target directory contents:"
        ls -la target/x86_64-unknown-linux-gnu/release/
        
    - name: Build Windows Binary
      run: |
        cargo build --release --target x86_64-pc-windows-gnu
        echo "Windows target directory contents:"
        ls -la target/x86_64-pc-windows-gnu/release/
        
    - name: Prepare Release Files
      run: |
        mkdir -p release
        cp target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} release/${{ env.BINARY_NAME }}-linux
        cp target/x86_64-pc-windows-gnu/release/${{ env.BINARY_NAME }}.exe release/${{ env.BINARY_NAME }}-windows.exe
        echo "Release directory contents:"
        ls -la release/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        files: |
          release/${{ env.BINARY_NAME }}-linux
          release/${{ env.BINARY_NAME }}-windows.exe
        generate_release_notes: true
